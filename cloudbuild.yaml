steps:
# Step 1: Build our custom Docker image
# This image will contain Node.js, Puppeteer, and all Chromium dependencies.
# - name: 'gcr.io/cloud-builders/docker'
#   id: 'Build custom puppeteer image'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       docker build -t asia-east2-docker.pkg.dev/randyguo-test-43165062/polaris/puppeteer-pdf-converter:latest .
#       docker push asia-east2-docker.pkg.dev/randyguo-test-43165062/polaris/puppeteer-pdf-converter:latest

# Step 2: Run the custom Docker image to generate the PDF
# We pass the URL and output filename as environment variables.
- name: 'asia-east2-docker.pkg.dev/randyguo-test-43165062/polaris/puppeteer-pdf-converter:latest'
  id: 'Generate PDF from URL'
  # entrypoint: 'node' # The entrypoint for our custom image is 'node'
  # args: ['index.js'] # The script to run
  # env:
  # - 'TARGET_URL=${_TARGET_URL}'       # URL to convert to PDF (e.g., https://www.google.com)
  # - 'OUTPUT_FILENAME=${_OUTPUT_FILENAME}' # Output PDF filename (e.g., google-homepage.pdf)

# Artifacts section to specify files to save to Cloud Storage
# artifacts:
#   objects:
#     location: 'gs://gcf-v2-sources-443719758514-asia-east2' # GCS bucket path to store the output PDF
#     paths:
#     - '/tmp/${_OUTPUT_FILENAME}' # The path where our script saves the PDF inside the container
    
substitutions:
  _OUTPUT_FILENAME: "github.pdf"
  _TARGET_URL: "https://www.github.com"
  _IMAGE_PATH: "asia-east2-docker.pkg.dev/randyguo-test-43165062/polaris/puppeteer-pdf-converter"

timeout: "1200s"  # Set a timeout for the build process (20 minutes)
options:
  logging: CLOUD_LOGGING_ONLY    
